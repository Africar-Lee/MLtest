{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs ### For full documentation visit mkdocs.org . Commands ### mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout ### mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"1.%E7%BB%AA%E8%AE%BA/","text":"\u7eea\u8bba ### \u6570\u636e\u7ed3\u6784\uff08\u4e09\u8981\u7d20\uff09 ### \u903b\u8f91\u7ed3\u6784 ### \u7ebf\u6027\u7ed3\u6784\uff1a ### [[2.\u7ebf\u6027\u8868|\u7ebf\u6027\u8868]] [[3.\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4|\u6808\u548c\u961f\u5217]] [[4.\u4e32|\u4e32]] [[3.\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4|\u6570\u7ec4]] \u975e\u7ebf\u6027\u7ed3\u6784\uff1a ### \u96c6\u5408 \u6811 \u4e8c\u53c9\u6811 \u6709\u5411\u56fe \u65e0\u5411\u56fe \u5b58\u50a8\u7ed3\u6784 ### \u4e5f\u79f0\u4e3a**\u7269\u7406\u7ed3\u6784** - \u987a\u5e8f\u5b58\u50a8 - \u94fe\u5f0f\u5b58\u50a8 - \u7d22\u5f15\u5b58\u50a8 - \u6563\u5217\u5b58\u50a8 \u6570\u636e\u7684\u8fd0\u7b97 ### \u7b97\u6cd5 ### \u57fa\u672c\u6982\u5ff5 ### \u4e94\u4e2a\u7279\u6027 ### \u6709\u7a77\u6027\uff1a\u6709\u7a77\u6b65\u5185\u7ed3\u675f\uff0c\u6bcf\u4e00\u6b65\u65f6\u95f4\u6709\u9650 \u786e\u5b9a\u6027\uff1a\u76f8\u540c\u7684\u8f93\u5165\u53ea\u6709\u76f8\u540c\u7684\u8f93\u51fa \u53ef\u884c\u6027\uff1a\u63cf\u8ff0\u7684\u64cd\u4f5c\u5fc5\u987b\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684 \u8f93\u5165\uff1a\u96f6\u4e2a\u6216\u591a\u4e2a \u8f93\u51fa\uff1a\u4e00\u4e2a\u6216\u591a\u4e2a \u597d\u7684\u7b97\u6cd5 ### \u6b63\u786e\u6027 \u53ef\u8bfb\u6027 \u5065\u58ee\u6027 \u9ad8\u6548\u7387\u4e0e\u4f4e\u5b58\u50a8\u9700\u6c42 \u6548\u7387\u7684\u5ea6\u91cf ### \u65f6\u95f4\u590d\u6742\u5ea6 ### \u52a0\u6cd5\u89c4\u5219\uff1a $$ T(n) = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max{f(n), g(n)}) $$ \u4e58\u6cd5\u89c4\u5219\uff1a $$ T(n) = T_1(n)\\times T_2(n) = O(f(n))\\times O(g(n)) = O(f(n)\\times g(n)) $$ \u5e38\u89c1\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a $$ O(1) < O(\\log_2n) < O(n) < O(n) < O(n\\log_2(n)) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n) $$ \u7a7a\u95f4\u590d\u6742\u5ea6 ### \u7b97\u6cd5\u539f\u5730\u5de5\u4f5c\u6240\u9700\u7684\u8f85\u52a9\u7a7a\u95f4\u4e3a\u5e38\u91cf\uff0c\u5373 \\(O(1)\\)","title":"\u7eea\u8bba"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_1","text":"","title":"\u7eea\u8bba"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_2","text":"","title":"\u6570\u636e\u7ed3\u6784\uff08\u4e09\u8981\u7d20\uff09"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_3","text":"","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_4","text":"[[2.\u7ebf\u6027\u8868|\u7ebf\u6027\u8868]] [[3.\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4|\u6808\u548c\u961f\u5217]] [[4.\u4e32|\u4e32]] [[3.\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4|\u6570\u7ec4]]","title":"\u7ebf\u6027\u7ed3\u6784\uff1a"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_5","text":"\u96c6\u5408 \u6811 \u4e8c\u53c9\u6811 \u6709\u5411\u56fe \u65e0\u5411\u56fe","title":"\u975e\u7ebf\u6027\u7ed3\u6784\uff1a"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_6","text":"\u4e5f\u79f0\u4e3a**\u7269\u7406\u7ed3\u6784** - \u987a\u5e8f\u5b58\u50a8 - \u94fe\u5f0f\u5b58\u50a8 - \u7d22\u5f15\u5b58\u50a8 - \u6563\u5217\u5b58\u50a8","title":"\u5b58\u50a8\u7ed3\u6784"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_7","text":"","title":"\u6570\u636e\u7684\u8fd0\u7b97"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_8","text":"","title":"\u7b97\u6cd5"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_9","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_10","text":"\u6709\u7a77\u6027\uff1a\u6709\u7a77\u6b65\u5185\u7ed3\u675f\uff0c\u6bcf\u4e00\u6b65\u65f6\u95f4\u6709\u9650 \u786e\u5b9a\u6027\uff1a\u76f8\u540c\u7684\u8f93\u5165\u53ea\u6709\u76f8\u540c\u7684\u8f93\u51fa \u53ef\u884c\u6027\uff1a\u63cf\u8ff0\u7684\u64cd\u4f5c\u5fc5\u987b\u662f\u53ef\u4ee5\u5b9e\u73b0\u7684 \u8f93\u5165\uff1a\u96f6\u4e2a\u6216\u591a\u4e2a \u8f93\u51fa\uff1a\u4e00\u4e2a\u6216\u591a\u4e2a","title":"\u4e94\u4e2a\u7279\u6027"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_11","text":"\u6b63\u786e\u6027 \u53ef\u8bfb\u6027 \u5065\u58ee\u6027 \u9ad8\u6548\u7387\u4e0e\u4f4e\u5b58\u50a8\u9700\u6c42","title":"\u597d\u7684\u7b97\u6cd5"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_12","text":"","title":"\u6548\u7387\u7684\u5ea6\u91cf"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_13","text":"\u52a0\u6cd5\u89c4\u5219\uff1a $$ T(n) = T_1(n) + T_2(n) = O(f(n)) + O(g(n)) = O(max{f(n), g(n)}) $$ \u4e58\u6cd5\u89c4\u5219\uff1a $$ T(n) = T_1(n)\\times T_2(n) = O(f(n))\\times O(g(n)) = O(f(n)\\times g(n)) $$ \u5e38\u89c1\u7684\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\uff1a $$ O(1) < O(\\log_2n) < O(n) < O(n) < O(n\\log_2(n)) < O(n^2) < O(n^3) < O(2^n) < O(n!) < O(n^n) $$","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"1.%E7%BB%AA%E8%AE%BA/#_14","text":"\u7b97\u6cd5\u539f\u5730\u5de5\u4f5c\u6240\u9700\u7684\u8f85\u52a9\u7a7a\u95f4\u4e3a\u5e38\u91cf\uff0c\u5373 \\(O(1)\\)","title":"\u7a7a\u95f4\u590d\u6742\u5ea6"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/","text":"\u7ebf\u6027\u8868 ### \u5b9a\u4e49\u548c\u57fa\u672c\u64cd\u4f5c ### \u5b9a\u4e49 ### $$ L = (a_1, a_2, ..., a_i, a_{i+1}, ..., a_n) $$ \u7279\u70b9 \uff1a - \u5143\u7d20\u4e2a\u6570\u6709\u9650 - \u5177\u6709\u903b\u8f91\u4e0a\u7684\u987a\u5e8f\u6027\uff0c\u5143\u7d20\u6709\u5148\u540e\u987a\u5e8f - \u8868\u4e2d\u5143\u7d20\u90fd\u662f\u6570\u636e\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5355\u4e2a\u5143\u7d20 - \u8868\u4e2d\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u5360\u636e\u76f8\u540c\u5927\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4 - \u53ca\u8ba8\u8bba\u5143\u7d20\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u4e0d\u8003\u8651\u5143\u7d20\u8868\u793a\u4ec0\u4e48\u5185\u5bb9 Note\uff1a\u7ebf\u6027\u8868\u662f\u4e00\u79cd\u903b\u8f91\u7ed3\u6784\uff0c\u8868\u793a\u5143\u7d20\u4e4b\u95f4\u4e00\u5bf9\u4e00\u7684\u76f8\u90bb\u5173\u7cfb\uff0c\u987a\u5e8f\u8868\u548c\u94fe\u8868\u662f\u5b58\u50a8\u7ed3\u6784\uff0c\u4e0d\u8981\u6df7\u6dc6 \u7ebf\u6027\u8868\u7684\u57fa\u672c\u64cd\u4f5c ### InitList(&L) \uff1a\u521d\u59cb\u5316\u8868\uff0c\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u7684\u7ebf\u6027\u8868 Length(L) \uff1a\u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6 LocateElem(L, e) \uff1a\u5728\u8868\u4e2d\u67e5\u627e\u5177\u6709\u7ed9\u5b9a\u5173\u952e\u5b57\u503c\u7684\u5143\u7d20 GetElem(L, i) \uff1a\u83b7\u53d6\u8868\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u5143\u7d20\u7684\u503c ListInsert(&L, i, e) \uff1a\u5728\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u6307\u5b9a\u5143\u7d20 ListDelete(&L, i, &e) \uff1a\u5220\u9664\u8868\u4e2di\u4f4d\u7f6e\u5143\u7d20\u5e76\u7528e\u8fd4\u56de PrintList(L) \uff1a\u8f93\u51fa\u8868 EmptyList(L) \uff1a\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 DestroyList(&L) \uff1a\u9500\u6bc1\u7ebf\u6027\u8868\uff0c\u5e76\u91ca\u653e\u539f\u672c\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4 \u7ebf\u6027\u8868\u7684\u987a\u5e8f\u8868\u793a ### \u987a\u5e8f\u8868\u7684\u5b9a\u4e49 ### \u9759\u6001\u5206\u914d\uff1a #define MaxSize 50 typedef struct { ElemType data [ MaxSize ]; int length ; } SqList ; \u52a8\u6001\u5206\u914d\uff1a #define InitSize 100 typedef struct { ElemType * data ; int MaxSize , length ; } SeqList ; \u52a8\u6001\u5206\u914d\u8bed\u53e5\u4e3a\uff1a L . data = ( ElemType * ) malloc ( sizeof ( ElemType ) * InitSize ); //C L . data = new ElemType [ InitSize ]; //cpp \u987a\u5e8f\u8868\u662f\u4e00\u79cd\u652f\u6301\u968f\u673a\u5b58\u53d6\u7684\u5b58\u50a8\u7ed3\u6784\uff0c \u5b58\u53d6\u65b9\u5f0f**\u662f\u6307**\u8bfb\u5199\u65b9\u5f0f \uff0c\u5373\u8bfb\u53d6\u5185\u5bb9\u548c\u4fee\u6539\u5185\u5bb9\u3002 \u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0 ### \u63d2\u5165\u64cd\u4f5c ### bool ListInsert ( SqList & L , int i , ElemType e ){ if ( i < 1 || i > L . length + 1 ) return false ; if ( L . Length >= MaxSize ) return false ; for ( int j = L . length ; j >= i ; j -- ) L . data [ j ] = Ldata [ j -1 ]; L . data [ i -1 ] = e ; L . length ++ ; return true ; } \u5220\u9664\u64cd\u4f5c ### bool ListDelete ( SqList & L , int i , ElemType & e ){ if ( i < 0 || i > L . length ) return false ; e = L . data [ i -1 ]; for ( int j = i ; j < L . length ; j ++ ) L . data [ j -1 ] = L . data [ j ]; L . length -- ; return true ; } \u6309\u503c\u67e5\u627e ### int LocateElem ( SqList L , ElemType e ){ int i ; for ( i = 0 ; i < L . length ; i ++ ) if ( L . data [ i ] == e ) return i + 1 ; return 0 ; } \u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u8868\u793a ### \u5355\u94fe\u8868 ### \u5b9a\u4e49 ### \u8282\u70b9\u7684\u8868\u793a\u4e3a\uff1a typedef struct LNode { ElemType data ; struct LNode * next ; } LNode , * LinkList ; Note\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868L\u800c\u8a00\uff0c\u5934\u6307\u9488\u6307\u5411\u5176\u5934\u8282\u70b9\uff0c\u800c\u5934\u8282\u70b9\u4e2d\u79d1\u4e0d\u8bbe\u4efb\u4f55\u4fe1\u606f\uff0c\u6216\u8005\u5b58\u50a8\u8868\u957f\u4fe1\u606f\u3002 \u5934\u8282\u70b9\u7684\u4f18\u70b9 \uff1a - \u7b2c\u4e00\u4e2a\u6570\u636e\u8282\u70b9\u7684\u4f4d\u7f6e\u88ab\u5b58\u653e\u5728\u5934\u8282\u70b9\u7684\u6307\u9488\u57df\u4e2d\uff0c\u56e0\u6b64\u7b2c\u4e00\u6570\u636e\u8282\u70b9\u7684\u64cd\u4f5c\u4e0e\u5176\u4ed6\u8282\u70b9\u76f8\u540c\uff0c\u65e0\u987b\u7279\u6b8a\u5904\u7406 - \u65e0\u8bba\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\uff0c\u5934\u6307\u9488\u90fd\u662f\u6307\u5411\u5934\u8282\u70b9\u7684\u975e\u7a7a\u6307\u9488\uff0c\u7a7a\u8868\u548c\u975e\u7a7a\u8868\u7684\u5904\u7406\u4e5f\u5c31\u5f97\u5230\u4e86\u7edf\u4e00 \u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0 ### \u521d\u59cb\u5316\u64cd\u4f5c ### void InitList ( LinkList & L ) { L = ( LinkList ) malloc ( sizeof ( LinkList )); L -> next = NULL ; } \u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 ### LinkList HeadInsert ( LinkList & L ) { LNode * s ; LinkList L ; InitList ( L ); ElemType x ; scanf ( \"%d\" , & x ); while ( x != 99999 ) { s = ( LNode * ) malloc ( sizeof ( LNode * )); s -> data = x ; L -> next = s ; s -> next = NULL ; scanf ( \"%d\" , & x ); } return L ; } \u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868 ### LinkList TailInsert ( LinkList & L ) { LNode * s , * r ; InitList ( L ); r = L ; ElemType x ; scanf ( \"%d\" , & x ); while ( x != 99999 ) { s = ( LNode * ) malloc ( sizeof ( LNode * )); s -> data = x ; s -> next = NULL ; r -> next = s ; r = r -> next ; scanf ( \"%d\" , & x ); } } \u6309\u5e8f\u53f7\u67e5\u627e\u8282\u70b9\u503c ### LNode * GetElem ( LinkList L , int i ) { if ( i == 0 ) return L ; if ( i < 1 ) return NULL ; LNode * s ; s = L ; int j = 1 ; while ( s && j < i ) { s = s -> next ; j ++ ; } return s ; } \u6309\u503c\u67e5\u627e\u8868\u8282\u70b9 ### LNode * LocateElem ( LinkList L , ElemType e ) { if ( L == NULL ) return NULL ; LNode * s ; s = L -> next ; if ( s == NULL ) return L ; while ( e != s -> data ) { s = s -> next ; } return s ; } \u63d2\u5165\u8282\u70b9\u64cd\u4f5c ### bool InsertLNode ( LinkList & L , LNode * x , int i ) { if ( i < 0 ) return false ; LNode * s = GetElem ( L , i - 1 ); x -> next = s -> next ; s -> next = x ; return true ; } \u5220\u9664\u8282\u70b9\u64cd\u4f5c ### bool DeleteLNode ( LinkList & L , int i ) { if ( i <= 0 ) return false ; LNode * s = GetElem ( L , i - 1 ); LNode * p = s -> next ; s -> next = p -> next ; free ( p ); return true ; } \u6c42\u8868\u957f\u64cd\u4f5c ### int ListLength ( LinkList L ) { if ( L == NULL ) return NULL ; int i = 0 ; LNode * p = L ; while (( p -> next ) != NULL ) { ++ i ; p = p -> next ; } return i ; } \u53cc\u94fe\u8868 ### \u5b9a\u4e49\u4e0e\u521d\u59cb\u5316 ### typedef struct DNode { ELemType data ; struct DNode * pre , * next ; } DNode , * DList ; void InitDList ( DList & L ) { L = ( DList ) malloc ( sizeof ( DList )); L -> pre = NULL ; L -> next = NULL ; } \u63d2\u5165\u64cd\u4f5c ### bool NextInsert ( DNode * p , DNode * x ) { if ( p == NULL ) return false ; x -> next = p -> next ; x -> pre = p ; p -> next = x ; return true ; } \u5220\u9664\u64cd\u4f5c ### bool DeleteDNode ( DNode * p , ELemType x ) { if ( p == NULL ) return false ; DNode * a = p -> pre , * b = p -> next ; x = p -> data ; a -> next = b ; b -> pre = a ; free ( p ); }","title":"\u7ebf\u6027\u8868"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_1","text":"","title":"\u7ebf\u6027\u8868"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_2","text":"","title":"\u5b9a\u4e49\u548c\u57fa\u672c\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_3","text":"$$ L = (a_1, a_2, ..., a_i, a_{i+1}, ..., a_n) $$ \u7279\u70b9 \uff1a - \u5143\u7d20\u4e2a\u6570\u6709\u9650 - \u5177\u6709\u903b\u8f91\u4e0a\u7684\u987a\u5e8f\u6027\uff0c\u5143\u7d20\u6709\u5148\u540e\u987a\u5e8f - \u8868\u4e2d\u5143\u7d20\u90fd\u662f\u6570\u636e\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5355\u4e2a\u5143\u7d20 - \u8868\u4e2d\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u76f8\u540c\uff0c\u6bcf\u4e2a\u5143\u7d20\u5360\u636e\u76f8\u540c\u5927\u5c0f\u7684\u5b58\u50a8\u7a7a\u95f4 - \u53ca\u8ba8\u8bba\u5143\u7d20\u95f4\u7684\u903b\u8f91\u5173\u7cfb\uff0c\u4e0d\u8003\u8651\u5143\u7d20\u8868\u793a\u4ec0\u4e48\u5185\u5bb9 Note\uff1a\u7ebf\u6027\u8868\u662f\u4e00\u79cd\u903b\u8f91\u7ed3\u6784\uff0c\u8868\u793a\u5143\u7d20\u4e4b\u95f4\u4e00\u5bf9\u4e00\u7684\u76f8\u90bb\u5173\u7cfb\uff0c\u987a\u5e8f\u8868\u548c\u94fe\u8868\u662f\u5b58\u50a8\u7ed3\u6784\uff0c\u4e0d\u8981\u6df7\u6dc6","title":"\u5b9a\u4e49"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_4","text":"InitList(&L) \uff1a\u521d\u59cb\u5316\u8868\uff0c\u6784\u9020\u4e00\u4e2a\u7a7a\u7684\u7684\u7ebf\u6027\u8868 Length(L) \uff1a\u8fd4\u56de\u7ebf\u6027\u8868\u7684\u957f\u5ea6 LocateElem(L, e) \uff1a\u5728\u8868\u4e2d\u67e5\u627e\u5177\u6709\u7ed9\u5b9a\u5173\u952e\u5b57\u503c\u7684\u5143\u7d20 GetElem(L, i) \uff1a\u83b7\u53d6\u8868\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u5143\u7d20\u7684\u503c ListInsert(&L, i, e) \uff1a\u5728\u8868L\u4e2d\u7b2ci\u4e2a\u4f4d\u7f6e\u63d2\u5165\u6307\u5b9a\u5143\u7d20 ListDelete(&L, i, &e) \uff1a\u5220\u9664\u8868\u4e2di\u4f4d\u7f6e\u5143\u7d20\u5e76\u7528e\u8fd4\u56de PrintList(L) \uff1a\u8f93\u51fa\u8868 EmptyList(L) \uff1a\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u8868 DestroyList(&L) \uff1a\u9500\u6bc1\u7ebf\u6027\u8868\uff0c\u5e76\u91ca\u653e\u539f\u672c\u6240\u5360\u7684\u5185\u5b58\u7a7a\u95f4","title":"\u7ebf\u6027\u8868\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_5","text":"","title":"\u7ebf\u6027\u8868\u7684\u987a\u5e8f\u8868\u793a"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_6","text":"\u9759\u6001\u5206\u914d\uff1a #define MaxSize 50 typedef struct { ElemType data [ MaxSize ]; int length ; } SqList ; \u52a8\u6001\u5206\u914d\uff1a #define InitSize 100 typedef struct { ElemType * data ; int MaxSize , length ; } SeqList ; \u52a8\u6001\u5206\u914d\u8bed\u53e5\u4e3a\uff1a L . data = ( ElemType * ) malloc ( sizeof ( ElemType ) * InitSize ); //C L . data = new ElemType [ InitSize ]; //cpp \u987a\u5e8f\u8868\u662f\u4e00\u79cd\u652f\u6301\u968f\u673a\u5b58\u53d6\u7684\u5b58\u50a8\u7ed3\u6784\uff0c \u5b58\u53d6\u65b9\u5f0f**\u662f\u6307**\u8bfb\u5199\u65b9\u5f0f \uff0c\u5373\u8bfb\u53d6\u5185\u5bb9\u548c\u4fee\u6539\u5185\u5bb9\u3002","title":"\u987a\u5e8f\u8868\u7684\u5b9a\u4e49"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_7","text":"","title":"\u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_8","text":"bool ListInsert ( SqList & L , int i , ElemType e ){ if ( i < 1 || i > L . length + 1 ) return false ; if ( L . Length >= MaxSize ) return false ; for ( int j = L . length ; j >= i ; j -- ) L . data [ j ] = Ldata [ j -1 ]; L . data [ i -1 ] = e ; L . length ++ ; return true ; }","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_9","text":"bool ListDelete ( SqList & L , int i , ElemType & e ){ if ( i < 0 || i > L . length ) return false ; e = L . data [ i -1 ]; for ( int j = i ; j < L . length ; j ++ ) L . data [ j -1 ] = L . data [ j ]; L . length -- ; return true ; }","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_10","text":"int LocateElem ( SqList L , ElemType e ){ int i ; for ( i = 0 ; i < L . length ; i ++ ) if ( L . data [ i ] == e ) return i + 1 ; return 0 ; }","title":"\u6309\u503c\u67e5\u627e"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_11","text":"","title":"\u7ebf\u6027\u8868\u7684\u94fe\u5f0f\u8868\u793a"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_12","text":"","title":"\u5355\u94fe\u8868"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_13","text":"\u8282\u70b9\u7684\u8868\u793a\u4e3a\uff1a typedef struct LNode { ElemType data ; struct LNode * next ; } LNode , * LinkList ; Note\uff1a\u5bf9\u4e8e\u5355\u94fe\u8868L\u800c\u8a00\uff0c\u5934\u6307\u9488\u6307\u5411\u5176\u5934\u8282\u70b9\uff0c\u800c\u5934\u8282\u70b9\u4e2d\u79d1\u4e0d\u8bbe\u4efb\u4f55\u4fe1\u606f\uff0c\u6216\u8005\u5b58\u50a8\u8868\u957f\u4fe1\u606f\u3002 \u5934\u8282\u70b9\u7684\u4f18\u70b9 \uff1a - \u7b2c\u4e00\u4e2a\u6570\u636e\u8282\u70b9\u7684\u4f4d\u7f6e\u88ab\u5b58\u653e\u5728\u5934\u8282\u70b9\u7684\u6307\u9488\u57df\u4e2d\uff0c\u56e0\u6b64\u7b2c\u4e00\u6570\u636e\u8282\u70b9\u7684\u64cd\u4f5c\u4e0e\u5176\u4ed6\u8282\u70b9\u76f8\u540c\uff0c\u65e0\u987b\u7279\u6b8a\u5904\u7406 - \u65e0\u8bba\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\uff0c\u5934\u6307\u9488\u90fd\u662f\u6307\u5411\u5934\u8282\u70b9\u7684\u975e\u7a7a\u6307\u9488\uff0c\u7a7a\u8868\u548c\u975e\u7a7a\u8868\u7684\u5904\u7406\u4e5f\u5c31\u5f97\u5230\u4e86\u7edf\u4e00","title":"\u5b9a\u4e49"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_14","text":"","title":"\u57fa\u672c\u64cd\u4f5c\u7684\u5b9e\u73b0"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_15","text":"void InitList ( LinkList & L ) { L = ( LinkList ) malloc ( sizeof ( LinkList )); L -> next = NULL ; }","title":"\u521d\u59cb\u5316\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_16","text":"LinkList HeadInsert ( LinkList & L ) { LNode * s ; LinkList L ; InitList ( L ); ElemType x ; scanf ( \"%d\" , & x ); while ( x != 99999 ) { s = ( LNode * ) malloc ( sizeof ( LNode * )); s -> data = x ; L -> next = s ; s -> next = NULL ; scanf ( \"%d\" , & x ); } return L ; }","title":"\u5934\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_17","text":"LinkList TailInsert ( LinkList & L ) { LNode * s , * r ; InitList ( L ); r = L ; ElemType x ; scanf ( \"%d\" , & x ); while ( x != 99999 ) { s = ( LNode * ) malloc ( sizeof ( LNode * )); s -> data = x ; s -> next = NULL ; r -> next = s ; r = r -> next ; scanf ( \"%d\" , & x ); } }","title":"\u5c3e\u63d2\u6cd5\u5efa\u7acb\u5355\u94fe\u8868"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_18","text":"LNode * GetElem ( LinkList L , int i ) { if ( i == 0 ) return L ; if ( i < 1 ) return NULL ; LNode * s ; s = L ; int j = 1 ; while ( s && j < i ) { s = s -> next ; j ++ ; } return s ; }","title":"\u6309\u5e8f\u53f7\u67e5\u627e\u8282\u70b9\u503c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_19","text":"LNode * LocateElem ( LinkList L , ElemType e ) { if ( L == NULL ) return NULL ; LNode * s ; s = L -> next ; if ( s == NULL ) return L ; while ( e != s -> data ) { s = s -> next ; } return s ; }","title":"\u6309\u503c\u67e5\u627e\u8868\u8282\u70b9"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_20","text":"bool InsertLNode ( LinkList & L , LNode * x , int i ) { if ( i < 0 ) return false ; LNode * s = GetElem ( L , i - 1 ); x -> next = s -> next ; s -> next = x ; return true ; }","title":"\u63d2\u5165\u8282\u70b9\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_21","text":"bool DeleteLNode ( LinkList & L , int i ) { if ( i <= 0 ) return false ; LNode * s = GetElem ( L , i - 1 ); LNode * p = s -> next ; s -> next = p -> next ; free ( p ); return true ; }","title":"\u5220\u9664\u8282\u70b9\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_22","text":"int ListLength ( LinkList L ) { if ( L == NULL ) return NULL ; int i = 0 ; LNode * p = L ; while (( p -> next ) != NULL ) { ++ i ; p = p -> next ; } return i ; }","title":"\u6c42\u8868\u957f\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_23","text":"","title":"\u53cc\u94fe\u8868"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_24","text":"typedef struct DNode { ELemType data ; struct DNode * pre , * next ; } DNode , * DList ; void InitDList ( DList & L ) { L = ( DList ) malloc ( sizeof ( DList )); L -> pre = NULL ; L -> next = NULL ; }","title":"\u5b9a\u4e49\u4e0e\u521d\u59cb\u5316"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_25","text":"bool NextInsert ( DNode * p , DNode * x ) { if ( p == NULL ) return false ; x -> next = p -> next ; x -> pre = p ; p -> next = x ; return true ; }","title":"\u63d2\u5165\u64cd\u4f5c"},{"location":"2.%E7%BA%BF%E6%80%A7%E8%A1%A8/#_26","text":"bool DeleteDNode ( DNode * p , ELemType x ) { if ( p == NULL ) return false ; DNode * a = p -> pre , * b = p -> next ; x = p -> data ; a -> next = b ; b -> pre = a ; free ( p ); }","title":"\u5220\u9664\u64cd\u4f5c"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/","text":"\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4 ### \u6808 ### \u57fa\u672c\u6982\u5ff5 ### \u5b9a\u4e49 \u53ea\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u5220\u9664\u7684[[2.\u7ebf\u6027\u8868 |\u7ebf\u6027\u8868]] LIFO\uff08\u540e\u5165\u5148\u51fa\uff09 \u6982\u5ff5 Top \u7ebf\u6027\u8868\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u5220\u9664\u7684\u4e00\u7aef Bottom \u56fa\u5b9a\u7684\uff0c\u4e0d\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u7684\u53e6\u4e00\u7aef \u7a7a\u6808 \u4e0d\u542b\u5143\u7d20\u7684\u7a7a\u8868 \u5361\u7279\u5170\u6570Catalan n\u4e2a\u4e0d\u540c\u5143\u7d20\u5165\u6808\uff0c\u51fa\u6808\u5143\u7d20\u7684\u4e0d\u540c\u6392\u5217\u4e2a\u6570\u4e3a \\(\\frac{1}{n+1}C^n_{2n}\\) \u57fa\u672c\u64cd\u4f5c InitStack(&S) StackEmpty(S) Push(S, &x) Pop(S, &x) GetTop(S, &x) DestroyStack(&S) \u6808\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 ### \u987a\u5e8f\u6808\u5b9e\u73b0 ### typedef struct { ELemType data [ MaxSize ]; int top ; } SqStack ; \u6808\u9876\u6307\u9488\uff1a S.top \uff0c \u521d\u59cb\u8bbe\u4e3a-1\uff1b\u6808\u9876\u5143\u7d20\uff1a S.data[S.top] \u5165\u6808\u64cd\u4f5c\uff1a\u6808\u4e0d\u6ee1\u65f6\uff0c\u6808\u9876\u6307\u9488\u52a01\uff0c\u518d\u9001\u503c\u5230\u6808\u9876\u5143\u7d20 \u51fa\u6808\u64cd\u4f5c\uff1a\u6808\u975e\u7a7a\u65f6\uff0c\u5148\u53d6\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u518d\u5c06\u6808\u9876\u6307\u9488\u51cf1 \u6808\u7a7a\u6761\u4ef6\uff1a S.top==-1 \uff1b\u6808\u6ee1\u6761\u4ef6\uff1a S.top==MaxSize-1 \uff1b\u6808\u957f\uff1a Stop+1 \u57fa\u672c\u64cd\u4f5c ### \u521d\u59cb\u5316 ### void InitStack ( SqStack & S ) { S . top = -1 ; } } \u6808\u5224\u7a7a ### bool StackEmpty ( SqStack S ) { if ( S . top == -1 ) return true ; return false ; } \u5165\u6808 ### bool Push ( SqStack & S , ELemType e ) { if ( S . top + 1 >= MaxSize ) return false ; ++ ( S . top ); S . data [ S . top ] = e ; return true ; } \u51fa\u6808 ### bool Pop ( SqStack & S , ELemType & x ) { if ( StackEmpty ( S ) == true ) return false ; x = S . data [ S . top ]; -- ( S . top ); return true ; } \u8bfb\u53d6\u6808\u9876\u5143\u7d20 ### bool GetTop ( SqStack S , ELemType & x ) { if ( StackEmpty ( S )) return false ; x = S . data [ S . top ]; return true ; } \u5171\u4eab\u6808 ### ![[Pasted image 20220722170321.png]] Note\uff1a - \u6808\u6ee1\u6761\u4ef6\u4e3a top1==top2-1 - \u5171\u4eab\u6808\u53ef\u4ee5\u8282\u7701\u5b58\u50a8\u7a7a\u95f4 - \u7b2c\u4e8c\u4e2a\u6808\u5165\u6808\u65f6\u5148\u51cf1\u518d\u8d4b\u503c \u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784 ### typedef struct Linknode { ELemType data ; struct Linknode * next ; } * LiStack ; \u961f\u5217 ### \u961f\u5217\u7684\u57fa\u672c\u6982\u5ff5 ### \u5b9a\u4e49 \u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u63d2\u5165\uff0c\u5728\u53e6\u4e00\u7aef\u5220\u9664\u7684[[2.\u7ebf\u6027\u8868|\u7ebf\u6027\u8868]] FIFO\uff08\u5148\u5165\u5148\u51fa\uff09 \u6982\u5ff5 \u5bf9\u5934\uff08Front\uff09 \u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\uff0c\u53c8\u79f0\u961f\u9996 \u961f\u5c3e\uff08Rear\uff09 \u5141\u8bb8\u63d2\u5165\u7684\u4e00\u7aef \u57fa\u672c\u64cd\u4f5c InitQueue(&Q) QueueEmpty(Q) EnQueue(&Q, x) DeQueue(&Q, &x) GetHead(Q, &x) \u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784 ### \u987a\u5e8f\u5b58\u50a8 ### typedef struct { ElemType data [ MaxSize ]; int front , rear ; } SqQueue ; \u961f\u7a7a\u6761\u4ef6 Q.front==Q.rear==0 \u5165\u961f\u64cd\u4f5c \u961f\u4e0d\u6ee1\u65f6\uff0c\u5c06\u503c\u9001\u5230\u961f\u5c3e\u5143\u7d20\uff0c\u518d\u5c06\u961f\u5c3e\u6307\u9488\u52a01 \u51fa\u961f\u64cd\u4f5c \u961f\u4e0d\u7a7a\u65f6\uff0c\u5148\u53d6\u961f\u5934\u5143\u7d20\uff0c\u518d\u5c06\u961f\u5934\u6307\u9488\u52a01 \u4ece\u4e0a\u9762\u7684\u51fa\u5165\u961f\u64cd\u4f5c\u53ef\u4ee5\u770b\u51fa\uff0c\u987a\u5e8f\u961f\u4f1a\u51fa\u73b0\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\u7684\u60c5\u51b5\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u5f15\u5165\u5faa\u73af\u6765\u89e3\u51b3 \u5faa\u73af\u961f\u5217 ### \u521d\u59cb\u65f6 Q.front=Q.rear=0 \u961f\u9996\u6307\u9488\u8fdb1 Q.front=(Q.front+1)%MaxSize \u961f\u5c3e\u6307\u9488\u8fdb1 Q.rear=(Q.rear+1)%MaxSize \u961f\u5217\u957f\u5ea6 (Q.rear+MaxSize-Q.front)%MaxSize \u961f\u7a7a\u6ee1\u5224\u65ad ### \u727a\u7272\u4e00\u4e2a\u5355\u5143\u6765\u533a\u5206\u961f\u7a7a\u548c\u961f\u6ee1 \u961f\u6ee1\u6761\u4ef6 (Q.rear+1)%MaxSize==Q.front \u961f\u7a7a\u6761\u4ef6 Q.front==Q.rear \u5143\u7d20\u4e2a\u6570 (Q.rear+MaxSize-Q.front)%MaxSize \u589e\u8bbe\u8868\u793a\u5143\u7d20\u4e2a\u6570\u7684\u6570\u636e\u6210\u5458 \u961f\u7a7a\u6761\u4ef6\u53d8\u4e3a Q.size==0 \u961f\u6ee1\u6761\u4ef6\u53d8\u4e3a Q.size==MaxSize \u4e24\u79cd\u60c5\u51b5\u5747\u6709 Q.rear==Q.front \u589e\u8bbe tag \u6570\u636e\u6210\u5458\uff0c tag==0 \u65f6 \u82e5\u56e0\u4e3a\u5220\u9664\u5bfc\u81f4 Q.front==Q.rear \uff0c\u5219\u4e3a\u961f\u7a7a \u82e5\u56e0\u4e3a\u5165\u961f\u5bfc\u81f4 Q.front==Q.rear \uff0c\u5219\u4e3a\u961f\u6ee1 \u521d\u59cb\u5316 ### void InitSqQueue ( SqQueue & Q ) { Q . front = 0 ; Q . rear = 0 ; } \u5224\u65ad\u961f\u7a7a ### bool EmptyQueue ( SqQueue Q ) { return ( Q . front == Q . rear ); } \u5224\u65ad\u961f\u6ee1 ### bool FullQueue ( SqQueue Q ) { return (( Q . rear + 1 ) % MaxSize == Q . front ); } \u5165\u961f ### bool EnQueue ( SqQueue & Q , ElemType x ) { if ( isFull ( Q )) return false ; Q . data [ Q . rear ] = x ; Q . rear = ( Q . rear + 1 ) % MaxSize ; return true ; } \u51fa\u961f ### bool EnQueue ( SqQueue & Q , ElemType x ) { if ( isFull ( Q )) return false ; Q . data [ Q . rear ] = x ; Q . rear = ( Q . rear + 1 ) % MaxSize ; return true ; } \u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784 ### \u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8 ### typedef struct node { ElemType data ; struct node * next ; } LinkNode ; typedef struct LinkQueue { LinkNode * front , * rear ; } LinkQueue ; \u5f53 Q.front==NULL \u548c Q.rear==NULL \u65f6\uff0c\u94fe\u5f0f\u961f\u5217\u4e3a\u7a7a \u521d\u59cb\u5316 ### void InitLinkQueue ( LinkQueue & Q ) { Q . front = Q . rear = ( LinkNode * ) malloc ( sizeof ( LinkNode )); Q . front -> next = NULL ; } \u5224\u961f\u7a7a ### bool isEmpty ( LinkQueue Q ) { if ( Q . front == Q . rear ) return true ; return false ; } \u5165\u961f ### void EnQueue ( LinkQueue & Q , ElemType x ) { LinkNode * s = ( LinkNode * ) malloc ( sizeof ( LinkNode )); s -> data = x ; s -> next = NULL ; Q . rear -> next = s ; Q . rear = s ; } \u51fa\u961f ### bool DeQueue ( LinkQueue & Q , ElemType & x ) { if ( isEmpty ( Q )) return false ; LinkNode * p = Q . front -> next ; x = p -> data ; Q . front -> next = p -> next ; if ( p == Q . rear ) Q . rear = Q . front ; free ( p ); return true ; } \u6808\u548c\u961f\u5217\u7684\u5e94\u7528 ### \u6808\u5728\u62ec\u53f7\u5339\u914d\u4e2d\u7684\u5e94\u7528 ### \u62ec\u53f7\u5339\u914d\u7b97\u6cd5 ### \u521d\u59cb\u8bbe\u7f6e\u4e00\u4e2a\u7a7a\u6808\uff0c\u987a\u5e8f\u8bfb\u5165\u62ec\u53f7 \u82e5\u662f\u53f3\u62ec\u53f7\uff0c\u90a3\u4e48\u5176\u8981\u4e48\u4e0e\u6808\u9876\u7684\u62ec\u53f7\u5339\u914d\uff0c\u4f7f\u6808\u9876\u7684\u62ec\u53f7\u5f39\u51fa\uff1b\u8981\u4e48\u62ec\u53f7\u4e0d\u5339\u914d\uff0c\u4e3a\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u63a8\u51fa\u7a0b\u5e8f \u82e5\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5c06\u5176\u538b\u5165\u6808\u4e2d\uff0c\u6210\u4e3a\u6808\u9876\u5143\u7d20 \u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u6808\u4e3a\u7a7a\uff0c\u5426\u5219\u62ec\u53f7\u5e8f\u5217\u4e0d\u5339\u914d \u6808\u5728\u8868\u8fbe\u5f0f\u4e2d\u7684\u5e94\u7528 ### \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u7684\u65b9\u6cd5 ### \u786e\u5b9a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u4e2d\u5404\u4e2a\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f \u9009\u62e9\u4e0b\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u6309\u7167 [\u5de6\u64cd\u4f5c\u6570 \u53f3\u64cd\u4f5c\u6570 \u8fd0\u7b97\u7b26] \u7684\u65b9\u5f0f\u7ec4\u5408\u6210\u4e00\u4e2a\u65b0\u7684\u64cd\u4f5c\u6570 \u5982\u679c\u8fd8\u6709\u8fd0\u7b97\u7b26\u6ca1\u6709\u88ab\u5904\u7406\uff0c\u5c31\u7ee7\u7eed 2 \u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u624b\u7b97\u65b9\u6cd5 ### \u4ece\u5de6\u5f80\u53f3\u626b\u63cf\uff0c\u6bcf\u9047\u5230\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5c31\u8ba9\u8fd0\u7b97\u7b26\u524d\u9762\u6700\u8fd1\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u6267\u884c\u5bf9\u5e94\u8fd0\u7b97\uff0c\u5408\u4f53\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u6570 \u5176\u4e2d\u8981\u7279\u522b\u6ce8\u610f\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5148\u540e\u987a\u5e8f \u7528\u6808\u5b9e\u73b0\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97 ### \u4ece\u5de6\u5f80\u53f3\u626b\u63cf\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u5143\u7d20 \u82e5\u626b\u63cf\u5230\u64cd\u4f5c\u6570\u5219\u538b\u5165\u6808\uff0c\u5e76\u56de\u52301\uff1b\u5426\u5219\u6267\u884c2 \u82e5\u626b\u63cf\u5230\u8fd0\u7b97\u7b26\u5219\u5f39\u51fa\u4e24\u4e2a\u6808\u9876\u5143\u7d20\uff0c\u6267\u884c\u76f8\u5e94\u7684\u8fd0\u7b97\uff0c\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u6808\u9876\uff0c\u5e76\u8fd4\u56de1 \u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6210\u540e\u7f00\u8868\u8fbe\u5f0f ### \u9047\u5230\u64cd\u4f5c\u6570\uff0c\u76f4\u63a5\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f \u9047\u5230\u754c\u9650\u7b26\uff0c\u82e5\u4e3a\u5de6\u62ec\u53f7\u5219\u76f4\u63a5\u5165\u6808\uff0c\u82e5\u4e3a\u53f3\u62ec\u53f7\u5219\u4f9d\u6b21\u5f39\u51fa\u6808\u5185\u8fd0\u7b97\u7b26\u5e76\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u5bf9\u5e94\u7684\u5de6\u62ec\u53f7\u4e3a\u6b62\uff08\u6ce8\u610f\uff0c\u62ec\u53f7\u4e0d\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\uff09 \u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u4f9d\u6b21\u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff0c\u5e76\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u82e5\u78b0\u5230\u5de6\u62ec\u53f7\u6216\u6808\u7a7a\u5219\u505c\u6b62\uff0c\u4e4b\u540e\u518d\u628a\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808 \u6309\u4ee5\u4e0a\u6b65\u9aa4\u5904\u7406\u5b8c\u6210\u4e4b\u540e\uff0c\u5c06\u6808\u4e2d\u5269\u4f59\u8fd0\u7b97\u7b26\u4f9d\u6b21\u5f39\u51fa\uff0c\u5e76\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f \u6808\u5728\u9012\u5f52\u4e2d\u7684\u5e94\u7528 ### \u51fd\u6570\u6267\u884c\u7684\u7279\u70b9 \uff1a\u6700\u540e\u88ab\u8c03\u7528\u7684\u51fd\u6570\u6700\u5148\u6267\u884c\u7ed3\u675f\uff08LIFO\uff09 \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u6808\u5b58\u50a8\uff1a - \u8c03\u7528\u8fd4\u56de\u5730\u5740 - \u5b9e\u53c2 - \u5c40\u90e8\u53d8\u91cf \u961f\u5217\u7684\u5e94\u7528\u2014\u2014\u6811\u7684\u5c42\u6b21\u904d\u5386 ### \u6839\u8282\u70b9\u5165\u961f \u82e5\u961f\u7a7a\uff0c\u5219\u7ed3\u675f\u904d\u5386\uff0c\u5426\u5219\u91cd\u590d3 \u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u51fa\u961f\uff0c\u5e76\u8bbf\u95ee\u4e4b\u3002\u82e5\u5176\u6709\u5de6\u5b69\u5b50\uff0c\u5219\u5c06\u5de6\u5b69\u5b50\u5165\u961f\uff0c\u82e5\u5176\u6709\u53f3\u5b69\u5b50\uff0c\u5219\u5c06\u53f3\u5b69\u5b50\u5165\u961f\uff0c\u8fd4\u56de2 \u961f\u5217\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5e94\u7528 ### \u6253\u5370\u6570\u636e\u7f13\u51b2\u533a\u7684\u6240\u5b58\u50a8\u7684\u6570\u636e\u662f\u4e00\u4e2a\u961f\u5217 \u591a\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u4f7f\u7528\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90\u65f6\uff0c\u5148\u6765\u5148\u670d\u52a1\uff08FCFS\uff09\u662f\u4e00\u79cd\u5e38\u7528\u7b56\u7565\uff0c\u5176\u4e2d\u4fbf\u662f\u4f7f\u7528\u4e86\u961f\u5217 \u6570\u7ec4\u548c\u7279\u6b8a\u77e9\u9635 ### \u6570\u7ec4 ### \u4e00\u7ef4\u6570\u7ec4 ### \u4e00\u7ef4\u6570\u7ec4 ElemType a[10]; \uff0c\u8d77\u59cb\u5730\u5740\u4e3aloc\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 \u6570\u7ec4\u5143\u7d20 a[i] \u7684\u5b58\u653e\u5730\u5740 = loc + i * sizeof(ElemType), (0\u2264i<10) \u4e8c\u7ef4\u6570\u7ec4 ### \u4e8c\u7ef4\u6570\u7ec4 ElemType b[M][N]; \uff0c\u8d77\u59cb\u5730\u5740\u4e3aloc\uff0c\u5373\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 \u884c\u4f18\u5148 \u6570\u7ec4\u5143\u7d20 b[i][j] \u7684\u5b58\u653e\u5730\u5740 = loc + (i * N + j) * sizeof(ElemType) \u5217\u4f18\u5148 b[i][j] \u7684\u5b58\u653e\u5730\u5740 = loc + (i + j * M) * sizeof(ElemType) \u77e9\u9635 ### \u5bf9\u79f0\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 ### \\[ \\begin{pmatrix} {a_{11}}&{a_{12}}&{\\cdots}&{a_{1n}}\\\\ {a_{21}}&{a_{22}}&{\\cdots}&{a_{2n}}\\\\ {\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\\\ {a_{n1}}&{a_{n2}}&{\\cdots}&{a_{nn}}\\\\ \\end{pmatrix} \\] \u5b58\u50a8\u7b56\u7565 \u53ea\u5b58\u50a8\u4e3b\u5bf9\u89d2\u7ebf + \u4e0b\u4e09\u89d2\u533a\uff0c\u6309\u884c\u4f18\u5148\u7684\u539f\u5219\u5c06\u5404\u4e2a\u5143\u7d20\u5b58\u5165\u4e00\u7ef4\u6570\u7ec4 b[] \u4e2d \u90a3\u4e48\u9700\u8981\u7528\u5230\u7684\u6570\u7ec4\u5927\u5c0f\u4e3a (1+n)*n/2*sizeof(ElemType) \u77e9\u9635\u4e0b\u6807\u5230\u6570\u7ec4\u4e0b\u6807\u7684\u6620\u5c04\u4e3a a[i][j] \\(\\rightarrow\\) b[i*(i-1)/2 + j -1] , (i\u2265j, \u4e5f\u5c31\u662f\u4e0b\u4e09\u89d2\u533a) a[i][j] = a[j][i] , (i<j, \u4e5f\u5c31\u662f\u4e0a\u4e09\u89d2\u533a) \u4e0a\u3001\u4e0b\u4e09\u89d2\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 ### \u4e0b\u4e09\u89d2\u77e9\u9635\uff1a $$ \\begin{pmatrix} {a_{11}}&{c}&{\\cdots}&{c}\\ {a_{21}}&{a_{22}}&{\\cdots}&{c}\\ {\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\ {a_{n1}}&{a_{n2}}&{\\cdots}&{a_{nn}}\\ \\end{pmatrix} $$ \u4e09\u5bf9\u89d2\u77e9\u9635\uff08\u5e26\u72b6\u77e9\u9635\uff09\uff1a $$ \\begin{pmatrix} {a_{11}}&{a_{12}}&{0}&{\\cdots}&{0}&{0}\\ {a_{21}}&{a_{22}}&{a_{23}}&{\\cdots}&{0}&{0}\\ {0}&{a_{32}}&{a_{33}}&{\\cdots}&{0}&{0}\\ {\\vdots}&{\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}&{\\vdots}\\ {0}&{0}&{0}&{\\cdots}&{a_{n-1,n-1}}&{a_{n-1,n}}\\ {0}&{0}&{0}&{\\cdots}&{a_{n,n-1}}&{a_{nn}}\\ \\end{pmatrix} $$ - \u5f53 \\(|i - j| > 1\\) \u65f6\uff0c\u6709 \\(a_{i,j}=0, (1\\le i,j \\le n)\\) - \u5b58\u50a8\u7b56\u7565 - \u884c\u4f18\u5148\u5b58\u50a8\uff0c\u53ea\u5b58\u50a8\u5e26\u72b6\u90e8\u5206 - \u524d i-1 \u884c\u5b58\u50a8\u4e86 3(i-1)-1 \u4e2a\u5143\u7d20\uff0c \\(a_{i,j}\\) \u662f i \u884c\u7b2c j-i+2 \u4e2a\u5143\u7d20\uff0c\u6240\u4ee5 \\(a_{i,j}\\) \u662f\u7b2c 2i+j-2 \u4e2a\u5143\u7d20\uff0c\u5373 k = 2i+j-3 - \u76f8\u5e94\u7684\uff0c\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7b2ck\u4e2a\u5143\u7d20\u5bf9\u5e94\u5230\u77e9\u9635\u5143\u7d20\u4e0b\u6807\u7684\u65b9\u5f0f\u4e3a - \u884c\u53f7i - \u524d i-1 \u884c\u5171 3(i-1)-1 \u4e2a\u5143\u7d20\uff0c\u524d i \u884c\u5171 3i-1 \u4e2a\u5143\u7d20\uff0c\u5373 3(i-1)-1 < k \\(\\le\\) 3i-1 \\(\\Rightarrow\\) i \\(\\ge\\) (k+2)/3\uff0c\u5373 i = \\(\\lceil\\) (k+2)/3 \\(\\rceil\\) - \u5217\u53f7j - \u56e0\u4e3a k = 2i+j-3\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u6b64\u5f0f\u63a8\u51fa j = k+3-2i \u7a00\u758f\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8 ### \u7a00\u758f\u77e9\u9635\uff1a $$ \\begin{pmatrix} {\\bf1}&{0}&{0}&{0}&{\\bf5}\\ {0}&{0}&{\\bf7}&{0}&{0}\\ {0}&{\\bf-1}&{0}&{0}&{0}\\ {0}&{0}&{0}&{0}&{0}\\ {0}&{0}&{0}&{\\bf2}&{0}\\ \\end{pmatrix} $$ | \u884c | \u5217 | \u503c | | --- | --- | --- | | 0 | 0 | 1 | | 0 | 4 | 5 | | 1 | 2 | 7 | | 2 | 1 | -1 | | 4 | 3 | 2 | \u7a00\u758f\u77e9\u9635 \u975e\u96f6\u5143\u7d20\u5f88\u5c11\u7684\u77e9\u9635 \u538b\u7f29\u5b58\u50a8\u7b56\u7565\u4e00 \u987a\u5e8f\u5b58\u50a8\u2014\u2014\u4e09\u5143\u7ec4<\u884c\uff0c\u5217\uff0c\u503c> \u5982\u4e0a\u9762\u7684\u7a00\u758f\u77e9\u9635\u53ef\u4ee5\u8bb0\u4e3a\u4e0a\u9762\u6240\u793a\u7684\u4e09\u5143\u7ec4 \u538b\u7f29\u5b58\u50a8\u7b56\u7565\u4e8c \u94fe\u5f0f\u5b58\u50a8\u2014\u2014\u5341\u5b57\u94fe\u8868\u6cd5","title":"\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_1","text":"","title":"\u6808\u3001\u961f\u5217\u548c\u6570\u7ec4"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_2","text":"","title":"\u6808"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_3","text":"\u5b9a\u4e49 \u53ea\u5728\u4e00\u7aef\u8fdb\u884c\u63d2\u5165\u5220\u9664\u7684[[2.\u7ebf\u6027\u8868 |\u7ebf\u6027\u8868]] LIFO\uff08\u540e\u5165\u5148\u51fa\uff09 \u6982\u5ff5 Top \u7ebf\u6027\u8868\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u5220\u9664\u7684\u4e00\u7aef Bottom \u56fa\u5b9a\u7684\uff0c\u4e0d\u5141\u8bb8\u8fdb\u884c\u63d2\u5165\u548c\u5220\u9664\u7684\u53e6\u4e00\u7aef \u7a7a\u6808 \u4e0d\u542b\u5143\u7d20\u7684\u7a7a\u8868 \u5361\u7279\u5170\u6570Catalan n\u4e2a\u4e0d\u540c\u5143\u7d20\u5165\u6808\uff0c\u51fa\u6808\u5143\u7d20\u7684\u4e0d\u540c\u6392\u5217\u4e2a\u6570\u4e3a \\(\\frac{1}{n+1}C^n_{2n}\\) \u57fa\u672c\u64cd\u4f5c InitStack(&S) StackEmpty(S) Push(S, &x) Pop(S, &x) GetTop(S, &x) DestroyStack(&S)","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_4","text":"","title":"\u6808\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_5","text":"typedef struct { ELemType data [ MaxSize ]; int top ; } SqStack ; \u6808\u9876\u6307\u9488\uff1a S.top \uff0c \u521d\u59cb\u8bbe\u4e3a-1\uff1b\u6808\u9876\u5143\u7d20\uff1a S.data[S.top] \u5165\u6808\u64cd\u4f5c\uff1a\u6808\u4e0d\u6ee1\u65f6\uff0c\u6808\u9876\u6307\u9488\u52a01\uff0c\u518d\u9001\u503c\u5230\u6808\u9876\u5143\u7d20 \u51fa\u6808\u64cd\u4f5c\uff1a\u6808\u975e\u7a7a\u65f6\uff0c\u5148\u53d6\u6808\u9876\u5143\u7d20\u7684\u503c\uff0c\u518d\u5c06\u6808\u9876\u6307\u9488\u51cf1 \u6808\u7a7a\u6761\u4ef6\uff1a S.top==-1 \uff1b\u6808\u6ee1\u6761\u4ef6\uff1a S.top==MaxSize-1 \uff1b\u6808\u957f\uff1a Stop+1","title":"\u987a\u5e8f\u6808\u5b9e\u73b0"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_6","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_7","text":"void InitStack ( SqStack & S ) { S . top = -1 ; } }","title":"\u521d\u59cb\u5316"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_8","text":"bool StackEmpty ( SqStack S ) { if ( S . top == -1 ) return true ; return false ; }","title":"\u6808\u5224\u7a7a"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_9","text":"bool Push ( SqStack & S , ELemType e ) { if ( S . top + 1 >= MaxSize ) return false ; ++ ( S . top ); S . data [ S . top ] = e ; return true ; }","title":"\u5165\u6808"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_10","text":"bool Pop ( SqStack & S , ELemType & x ) { if ( StackEmpty ( S ) == true ) return false ; x = S . data [ S . top ]; -- ( S . top ); return true ; }","title":"\u51fa\u6808"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_11","text":"bool GetTop ( SqStack S , ELemType & x ) { if ( StackEmpty ( S )) return false ; x = S . data [ S . top ]; return true ; }","title":"\u8bfb\u53d6\u6808\u9876\u5143\u7d20"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_12","text":"![[Pasted image 20220722170321.png]] Note\uff1a - \u6808\u6ee1\u6761\u4ef6\u4e3a top1==top2-1 - \u5171\u4eab\u6808\u53ef\u4ee5\u8282\u7701\u5b58\u50a8\u7a7a\u95f4 - \u7b2c\u4e8c\u4e2a\u6808\u5165\u6808\u65f6\u5148\u51cf1\u518d\u8d4b\u503c","title":"\u5171\u4eab\u6808"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_13","text":"typedef struct Linknode { ELemType data ; struct Linknode * next ; } * LiStack ;","title":"\u6808\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_14","text":"","title":"\u961f\u5217"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_15","text":"\u5b9a\u4e49 \u53ea\u5141\u8bb8\u5728\u4e00\u7aef\u63d2\u5165\uff0c\u5728\u53e6\u4e00\u7aef\u5220\u9664\u7684[[2.\u7ebf\u6027\u8868|\u7ebf\u6027\u8868]] FIFO\uff08\u5148\u5165\u5148\u51fa\uff09 \u6982\u5ff5 \u5bf9\u5934\uff08Front\uff09 \u5141\u8bb8\u5220\u9664\u7684\u4e00\u7aef\uff0c\u53c8\u79f0\u961f\u9996 \u961f\u5c3e\uff08Rear\uff09 \u5141\u8bb8\u63d2\u5165\u7684\u4e00\u7aef \u57fa\u672c\u64cd\u4f5c InitQueue(&Q) QueueEmpty(Q) EnQueue(&Q, x) DeQueue(&Q, &x) GetHead(Q, &x)","title":"\u961f\u5217\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_16","text":"","title":"\u961f\u5217\u7684\u987a\u5e8f\u5b58\u50a8\u7ed3\u6784"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_17","text":"typedef struct { ElemType data [ MaxSize ]; int front , rear ; } SqQueue ; \u961f\u7a7a\u6761\u4ef6 Q.front==Q.rear==0 \u5165\u961f\u64cd\u4f5c \u961f\u4e0d\u6ee1\u65f6\uff0c\u5c06\u503c\u9001\u5230\u961f\u5c3e\u5143\u7d20\uff0c\u518d\u5c06\u961f\u5c3e\u6307\u9488\u52a01 \u51fa\u961f\u64cd\u4f5c \u961f\u4e0d\u7a7a\u65f6\uff0c\u5148\u53d6\u961f\u5934\u5143\u7d20\uff0c\u518d\u5c06\u961f\u5934\u6307\u9488\u52a01 \u4ece\u4e0a\u9762\u7684\u51fa\u5165\u961f\u64cd\u4f5c\u53ef\u4ee5\u770b\u51fa\uff0c\u987a\u5e8f\u961f\u4f1a\u51fa\u73b0\u6d6a\u8d39\u5b58\u50a8\u7a7a\u95f4\u7684\u60c5\u51b5\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u5f15\u5165\u5faa\u73af\u6765\u89e3\u51b3","title":"\u987a\u5e8f\u5b58\u50a8"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_18","text":"\u521d\u59cb\u65f6 Q.front=Q.rear=0 \u961f\u9996\u6307\u9488\u8fdb1 Q.front=(Q.front+1)%MaxSize \u961f\u5c3e\u6307\u9488\u8fdb1 Q.rear=(Q.rear+1)%MaxSize \u961f\u5217\u957f\u5ea6 (Q.rear+MaxSize-Q.front)%MaxSize","title":"\u5faa\u73af\u961f\u5217"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_19","text":"\u727a\u7272\u4e00\u4e2a\u5355\u5143\u6765\u533a\u5206\u961f\u7a7a\u548c\u961f\u6ee1 \u961f\u6ee1\u6761\u4ef6 (Q.rear+1)%MaxSize==Q.front \u961f\u7a7a\u6761\u4ef6 Q.front==Q.rear \u5143\u7d20\u4e2a\u6570 (Q.rear+MaxSize-Q.front)%MaxSize \u589e\u8bbe\u8868\u793a\u5143\u7d20\u4e2a\u6570\u7684\u6570\u636e\u6210\u5458 \u961f\u7a7a\u6761\u4ef6\u53d8\u4e3a Q.size==0 \u961f\u6ee1\u6761\u4ef6\u53d8\u4e3a Q.size==MaxSize \u4e24\u79cd\u60c5\u51b5\u5747\u6709 Q.rear==Q.front \u589e\u8bbe tag \u6570\u636e\u6210\u5458\uff0c tag==0 \u65f6 \u82e5\u56e0\u4e3a\u5220\u9664\u5bfc\u81f4 Q.front==Q.rear \uff0c\u5219\u4e3a\u961f\u7a7a \u82e5\u56e0\u4e3a\u5165\u961f\u5bfc\u81f4 Q.front==Q.rear \uff0c\u5219\u4e3a\u961f\u6ee1","title":"\u961f\u7a7a\u6ee1\u5224\u65ad"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_20","text":"void InitSqQueue ( SqQueue & Q ) { Q . front = 0 ; Q . rear = 0 ; }","title":"\u521d\u59cb\u5316"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_21","text":"bool EmptyQueue ( SqQueue Q ) { return ( Q . front == Q . rear ); }","title":"\u5224\u65ad\u961f\u7a7a"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_22","text":"bool FullQueue ( SqQueue Q ) { return (( Q . rear + 1 ) % MaxSize == Q . front ); }","title":"\u5224\u65ad\u961f\u6ee1"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_23","text":"bool EnQueue ( SqQueue & Q , ElemType x ) { if ( isFull ( Q )) return false ; Q . data [ Q . rear ] = x ; Q . rear = ( Q . rear + 1 ) % MaxSize ; return true ; }","title":"\u5165\u961f"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_24","text":"bool EnQueue ( SqQueue & Q , ElemType x ) { if ( isFull ( Q )) return false ; Q . data [ Q . rear ] = x ; Q . rear = ( Q . rear + 1 ) % MaxSize ; return true ; }","title":"\u51fa\u961f"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_25","text":"","title":"\u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8\u7ed3\u6784"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_26","text":"typedef struct node { ElemType data ; struct node * next ; } LinkNode ; typedef struct LinkQueue { LinkNode * front , * rear ; } LinkQueue ; \u5f53 Q.front==NULL \u548c Q.rear==NULL \u65f6\uff0c\u94fe\u5f0f\u961f\u5217\u4e3a\u7a7a","title":"\u961f\u5217\u7684\u94fe\u5f0f\u5b58\u50a8"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_27","text":"void InitLinkQueue ( LinkQueue & Q ) { Q . front = Q . rear = ( LinkNode * ) malloc ( sizeof ( LinkNode )); Q . front -> next = NULL ; }","title":"\u521d\u59cb\u5316"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_28","text":"bool isEmpty ( LinkQueue Q ) { if ( Q . front == Q . rear ) return true ; return false ; }","title":"\u5224\u961f\u7a7a"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_29","text":"void EnQueue ( LinkQueue & Q , ElemType x ) { LinkNode * s = ( LinkNode * ) malloc ( sizeof ( LinkNode )); s -> data = x ; s -> next = NULL ; Q . rear -> next = s ; Q . rear = s ; }","title":"\u5165\u961f"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_30","text":"bool DeQueue ( LinkQueue & Q , ElemType & x ) { if ( isEmpty ( Q )) return false ; LinkNode * p = Q . front -> next ; x = p -> data ; Q . front -> next = p -> next ; if ( p == Q . rear ) Q . rear = Q . front ; free ( p ); return true ; }","title":"\u51fa\u961f"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_31","text":"","title":"\u6808\u548c\u961f\u5217\u7684\u5e94\u7528"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_32","text":"","title":"\u6808\u5728\u62ec\u53f7\u5339\u914d\u4e2d\u7684\u5e94\u7528"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_33","text":"\u521d\u59cb\u8bbe\u7f6e\u4e00\u4e2a\u7a7a\u6808\uff0c\u987a\u5e8f\u8bfb\u5165\u62ec\u53f7 \u82e5\u662f\u53f3\u62ec\u53f7\uff0c\u90a3\u4e48\u5176\u8981\u4e48\u4e0e\u6808\u9876\u7684\u62ec\u53f7\u5339\u914d\uff0c\u4f7f\u6808\u9876\u7684\u62ec\u53f7\u5f39\u51fa\uff1b\u8981\u4e48\u62ec\u53f7\u4e0d\u5339\u914d\uff0c\u4e3a\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u63a8\u51fa\u7a0b\u5e8f \u82e5\u662f\u5de6\u62ec\u53f7\uff0c\u5219\u5c06\u5176\u538b\u5165\u6808\u4e2d\uff0c\u6210\u4e3a\u6808\u9876\u5143\u7d20 \u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u6808\u4e3a\u7a7a\uff0c\u5426\u5219\u62ec\u53f7\u5e8f\u5217\u4e0d\u5339\u914d","title":"\u62ec\u53f7\u5339\u914d\u7b97\u6cd5"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_34","text":"","title":"\u6808\u5728\u8868\u8fbe\u5f0f\u4e2d\u7684\u5e94\u7528"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_35","text":"\u786e\u5b9a\u4e2d\u7f00\u8868\u8fbe\u5f0f\u4e2d\u5404\u4e2a\u8fd0\u7b97\u7b26\u7684\u8fd0\u7b97\u987a\u5e8f \u9009\u62e9\u4e0b\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u6309\u7167 [\u5de6\u64cd\u4f5c\u6570 \u53f3\u64cd\u4f5c\u6570 \u8fd0\u7b97\u7b26] \u7684\u65b9\u5f0f\u7ec4\u5408\u6210\u4e00\u4e2a\u65b0\u7684\u64cd\u4f5c\u6570 \u5982\u679c\u8fd8\u6709\u8fd0\u7b97\u7b26\u6ca1\u6709\u88ab\u5904\u7406\uff0c\u5c31\u7ee7\u7eed 2","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u540e\u7f00\u7684\u65b9\u6cd5"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_36","text":"\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\uff0c\u6bcf\u9047\u5230\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u5c31\u8ba9\u8fd0\u7b97\u7b26\u524d\u9762\u6700\u8fd1\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u6267\u884c\u5bf9\u5e94\u8fd0\u7b97\uff0c\u5408\u4f53\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u6570 \u5176\u4e2d\u8981\u7279\u522b\u6ce8\u610f\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5148\u540e\u987a\u5e8f","title":"\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u624b\u7b97\u65b9\u6cd5"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_37","text":"\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u76f4\u5230\u5904\u7406\u5b8c\u6240\u6709\u5143\u7d20 \u82e5\u626b\u63cf\u5230\u64cd\u4f5c\u6570\u5219\u538b\u5165\u6808\uff0c\u5e76\u56de\u52301\uff1b\u5426\u5219\u6267\u884c2 \u82e5\u626b\u63cf\u5230\u8fd0\u7b97\u7b26\u5219\u5f39\u51fa\u4e24\u4e2a\u6808\u9876\u5143\u7d20\uff0c\u6267\u884c\u76f8\u5e94\u7684\u8fd0\u7b97\uff0c\u8fd0\u7b97\u7ed3\u679c\u538b\u56de\u6808\u9876\uff0c\u5e76\u8fd4\u56de1","title":"\u7528\u6808\u5b9e\u73b0\u540e\u7f00\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_38","text":"\u9047\u5230\u64cd\u4f5c\u6570\uff0c\u76f4\u63a5\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f \u9047\u5230\u754c\u9650\u7b26\uff0c\u82e5\u4e3a\u5de6\u62ec\u53f7\u5219\u76f4\u63a5\u5165\u6808\uff0c\u82e5\u4e3a\u53f3\u62ec\u53f7\u5219\u4f9d\u6b21\u5f39\u51fa\u6808\u5185\u8fd0\u7b97\u7b26\u5e76\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u76f4\u5230\u5f39\u51fa\u5bf9\u5e94\u7684\u5de6\u62ec\u53f7\u4e3a\u6b62\uff08\u6ce8\u610f\uff0c\u62ec\u53f7\u4e0d\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\uff09 \u9047\u5230\u8fd0\u7b97\u7b26\uff0c\u4f9d\u6b21\u5f39\u51fa\u6808\u4e2d\u4f18\u5148\u7ea7\u9ad8\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u6240\u6709\u8fd0\u7b97\u7b26\uff0c\u5e76\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u82e5\u78b0\u5230\u5de6\u62ec\u53f7\u6216\u6808\u7a7a\u5219\u505c\u6b62\uff0c\u4e4b\u540e\u518d\u628a\u5f53\u524d\u8fd0\u7b97\u7b26\u5165\u6808 \u6309\u4ee5\u4e0a\u6b65\u9aa4\u5904\u7406\u5b8c\u6210\u4e4b\u540e\uff0c\u5c06\u6808\u4e2d\u5269\u4f59\u8fd0\u7b97\u7b26\u4f9d\u6b21\u5f39\u51fa\uff0c\u5e76\u52a0\u5165\u540e\u7f00\u8868\u8fbe\u5f0f","title":"\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u6210\u540e\u7f00\u8868\u8fbe\u5f0f"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_39","text":"\u51fd\u6570\u6267\u884c\u7684\u7279\u70b9 \uff1a\u6700\u540e\u88ab\u8c03\u7528\u7684\u51fd\u6570\u6700\u5148\u6267\u884c\u7ed3\u675f\uff08LIFO\uff09 \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u6808\u5b58\u50a8\uff1a - \u8c03\u7528\u8fd4\u56de\u5730\u5740 - \u5b9e\u53c2 - \u5c40\u90e8\u53d8\u91cf","title":"\u6808\u5728\u9012\u5f52\u4e2d\u7684\u5e94\u7528"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_40","text":"\u6839\u8282\u70b9\u5165\u961f \u82e5\u961f\u7a7a\uff0c\u5219\u7ed3\u675f\u904d\u5386\uff0c\u5426\u5219\u91cd\u590d3 \u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u8282\u70b9\u51fa\u961f\uff0c\u5e76\u8bbf\u95ee\u4e4b\u3002\u82e5\u5176\u6709\u5de6\u5b69\u5b50\uff0c\u5219\u5c06\u5de6\u5b69\u5b50\u5165\u961f\uff0c\u82e5\u5176\u6709\u53f3\u5b69\u5b50\uff0c\u5219\u5c06\u53f3\u5b69\u5b50\u5165\u961f\uff0c\u8fd4\u56de2","title":"\u961f\u5217\u7684\u5e94\u7528\u2014\u2014\u6811\u7684\u5c42\u6b21\u904d\u5386"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_41","text":"\u6253\u5370\u6570\u636e\u7f13\u51b2\u533a\u7684\u6240\u5b58\u50a8\u7684\u6570\u636e\u662f\u4e00\u4e2a\u961f\u5217 \u591a\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u4f7f\u7528\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90\u65f6\uff0c\u5148\u6765\u5148\u670d\u52a1\uff08FCFS\uff09\u662f\u4e00\u79cd\u5e38\u7528\u7b56\u7565\uff0c\u5176\u4e2d\u4fbf\u662f\u4f7f\u7528\u4e86\u961f\u5217","title":"\u961f\u5217\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u7684\u5e94\u7528"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_42","text":"","title":"\u6570\u7ec4\u548c\u7279\u6b8a\u77e9\u9635"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_43","text":"","title":"\u6570\u7ec4"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_44","text":"\u4e00\u7ef4\u6570\u7ec4 ElemType a[10]; \uff0c\u8d77\u59cb\u5730\u5740\u4e3aloc\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 \u6570\u7ec4\u5143\u7d20 a[i] \u7684\u5b58\u653e\u5730\u5740 = loc + i * sizeof(ElemType), (0\u2264i<10)","title":"\u4e00\u7ef4\u6570\u7ec4"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_45","text":"\u4e8c\u7ef4\u6570\u7ec4 ElemType b[M][N]; \uff0c\u8d77\u59cb\u5730\u5740\u4e3aloc\uff0c\u5373\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740 \u884c\u4f18\u5148 \u6570\u7ec4\u5143\u7d20 b[i][j] \u7684\u5b58\u653e\u5730\u5740 = loc + (i * N + j) * sizeof(ElemType) \u5217\u4f18\u5148 b[i][j] \u7684\u5b58\u653e\u5730\u5740 = loc + (i + j * M) * sizeof(ElemType)","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_46","text":"","title":"\u77e9\u9635"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_47","text":"\\[ \\begin{pmatrix} {a_{11}}&{a_{12}}&{\\cdots}&{a_{1n}}\\\\ {a_{21}}&{a_{22}}&{\\cdots}&{a_{2n}}\\\\ {\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\\\ {a_{n1}}&{a_{n2}}&{\\cdots}&{a_{nn}}\\\\ \\end{pmatrix} \\] \u5b58\u50a8\u7b56\u7565 \u53ea\u5b58\u50a8\u4e3b\u5bf9\u89d2\u7ebf + \u4e0b\u4e09\u89d2\u533a\uff0c\u6309\u884c\u4f18\u5148\u7684\u539f\u5219\u5c06\u5404\u4e2a\u5143\u7d20\u5b58\u5165\u4e00\u7ef4\u6570\u7ec4 b[] \u4e2d \u90a3\u4e48\u9700\u8981\u7528\u5230\u7684\u6570\u7ec4\u5927\u5c0f\u4e3a (1+n)*n/2*sizeof(ElemType) \u77e9\u9635\u4e0b\u6807\u5230\u6570\u7ec4\u4e0b\u6807\u7684\u6620\u5c04\u4e3a a[i][j] \\(\\rightarrow\\) b[i*(i-1)/2 + j -1] , (i\u2265j, \u4e5f\u5c31\u662f\u4e0b\u4e09\u89d2\u533a) a[i][j] = a[j][i] , (i<j, \u4e5f\u5c31\u662f\u4e0a\u4e09\u89d2\u533a)","title":"\u5bf9\u79f0\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_48","text":"\u4e0b\u4e09\u89d2\u77e9\u9635\uff1a $$ \\begin{pmatrix} {a_{11}}&{c}&{\\cdots}&{c}\\ {a_{21}}&{a_{22}}&{\\cdots}&{c}\\ {\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}\\ {a_{n1}}&{a_{n2}}&{\\cdots}&{a_{nn}}\\ \\end{pmatrix} $$ \u4e09\u5bf9\u89d2\u77e9\u9635\uff08\u5e26\u72b6\u77e9\u9635\uff09\uff1a $$ \\begin{pmatrix} {a_{11}}&{a_{12}}&{0}&{\\cdots}&{0}&{0}\\ {a_{21}}&{a_{22}}&{a_{23}}&{\\cdots}&{0}&{0}\\ {0}&{a_{32}}&{a_{33}}&{\\cdots}&{0}&{0}\\ {\\vdots}&{\\vdots}&{\\vdots}&{\\ddots}&{\\vdots}&{\\vdots}\\ {0}&{0}&{0}&{\\cdots}&{a_{n-1,n-1}}&{a_{n-1,n}}\\ {0}&{0}&{0}&{\\cdots}&{a_{n,n-1}}&{a_{nn}}\\ \\end{pmatrix} $$ - \u5f53 \\(|i - j| > 1\\) \u65f6\uff0c\u6709 \\(a_{i,j}=0, (1\\le i,j \\le n)\\) - \u5b58\u50a8\u7b56\u7565 - \u884c\u4f18\u5148\u5b58\u50a8\uff0c\u53ea\u5b58\u50a8\u5e26\u72b6\u90e8\u5206 - \u524d i-1 \u884c\u5b58\u50a8\u4e86 3(i-1)-1 \u4e2a\u5143\u7d20\uff0c \\(a_{i,j}\\) \u662f i \u884c\u7b2c j-i+2 \u4e2a\u5143\u7d20\uff0c\u6240\u4ee5 \\(a_{i,j}\\) \u662f\u7b2c 2i+j-2 \u4e2a\u5143\u7d20\uff0c\u5373 k = 2i+j-3 - \u76f8\u5e94\u7684\uff0c\u4e00\u7ef4\u6570\u7ec4\u4e2d\u7b2ck\u4e2a\u5143\u7d20\u5bf9\u5e94\u5230\u77e9\u9635\u5143\u7d20\u4e0b\u6807\u7684\u65b9\u5f0f\u4e3a - \u884c\u53f7i - \u524d i-1 \u884c\u5171 3(i-1)-1 \u4e2a\u5143\u7d20\uff0c\u524d i \u884c\u5171 3i-1 \u4e2a\u5143\u7d20\uff0c\u5373 3(i-1)-1 < k \\(\\le\\) 3i-1 \\(\\Rightarrow\\) i \\(\\ge\\) (k+2)/3\uff0c\u5373 i = \\(\\lceil\\) (k+2)/3 \\(\\rceil\\) - \u5217\u53f7j - \u56e0\u4e3a k = 2i+j-3\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u6b64\u5f0f\u63a8\u51fa j = k+3-2i","title":"\u4e0a\u3001\u4e0b\u4e09\u89d2\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"3.%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/#_49","text":"\u7a00\u758f\u77e9\u9635\uff1a $$ \\begin{pmatrix} {\\bf1}&{0}&{0}&{0}&{\\bf5}\\ {0}&{0}&{\\bf7}&{0}&{0}\\ {0}&{\\bf-1}&{0}&{0}&{0}\\ {0}&{0}&{0}&{0}&{0}\\ {0}&{0}&{0}&{\\bf2}&{0}\\ \\end{pmatrix} $$ | \u884c | \u5217 | \u503c | | --- | --- | --- | | 0 | 0 | 1 | | 0 | 4 | 5 | | 1 | 2 | 7 | | 2 | 1 | -1 | | 4 | 3 | 2 | \u7a00\u758f\u77e9\u9635 \u975e\u96f6\u5143\u7d20\u5f88\u5c11\u7684\u77e9\u9635 \u538b\u7f29\u5b58\u50a8\u7b56\u7565\u4e00 \u987a\u5e8f\u5b58\u50a8\u2014\u2014\u4e09\u5143\u7ec4<\u884c\uff0c\u5217\uff0c\u503c> \u5982\u4e0a\u9762\u7684\u7a00\u758f\u77e9\u9635\u53ef\u4ee5\u8bb0\u4e3a\u4e0a\u9762\u6240\u793a\u7684\u4e09\u5143\u7ec4 \u538b\u7f29\u5b58\u50a8\u7b56\u7565\u4e8c \u94fe\u5f0f\u5b58\u50a8\u2014\u2014\u5341\u5b57\u94fe\u8868\u6cd5","title":"\u7a00\u758f\u77e9\u9635\u7684\u538b\u7f29\u5b58\u50a8"},{"location":"4.%E4%B8%B2/","text":"\u4e32 ### \u4e32\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0 ### \u4e32\uff08string\uff09\u5c31\u662f**\u5b57\u7b26\u4e32** \u4e32\u7684\u5b9a\u4e49 ### \\[S = \\\\'a_1a_2\\cdots a_n\\\\'\\] \u4e32\u4e2d\u4ecd\u4ee5\u591a\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u4e32\u79f0\u4e3a**\u5b57\u4e32**\uff0c\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e\u7531\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u5b9a\u4e49 \u4e32\u7684\u5b58\u50a8\u7ed3\u6784 ### \u5b9a\u957f\u987a\u5e8f\u5b58\u50a8\u8868\u793a ### #define MaxLen 255 typedef struct { char ch [ MaxLen ]; int length ; } SString ; \u5806\u5206\u914d\u5b58\u50a8\u8868\u793a ### typedef struct { char * ch ; int length ; } HString ; \u5757\u94fe\u5b58\u50a8\u8868\u793a ### \u5229\u7528\u94fe\u8868\u6765\u5b58\u50a8\u4e32\uff0c\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u5b57\u7b26\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u8282\u70b9\u5c31\u79f0\u4e3a**\u5757**\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e0d\u6ee1\u65f6\u7528 # \u8865\u4e0a \u4e32\u7684\u57fa\u672c\u64cd\u4f5c ### StrAssign(&T, chars) \u8d4b\u503c\u64cd\u4f5c StrCopy(&T, S) \u590d\u5236\u64cd\u4f5c StrEmpty(S) \u5224\u7a7a\u64cd\u4f5c StrCompare(S, T) \u6bd4\u8f83\u64cd\u4f5c StrLength(S) \u6c42\u957f\u5ea6 SubString(&Sub, S, pos, len) \u7528 Sub \u8fd4\u56de\u4e32 S \u7684\u7b2c pos \u4e2a\u5b57\u7b26\u8d77\uff0c\u957f\u5ea6\u4e3a len \u7684\u5b57\u4e32 Concat(&T, S1, S2) \u8fde\u63a5\u4e24\u4e2a\u4e32 Index(S, T) \u5b9a\u4f4d\u64cd\u4f5c\u3002\u82e5\u4e3b\u4e32 S \u4e2d\u5b58\u5728\u548c T \u76f8\u540c\u7684\u5b57\u4e32\uff0c\u90a3\u4e48\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u8fd4\u56de0 ClearString(&S) \u6e05\u7a7a\u64cd\u4f5c\uff0c\u5c06 S \u6e05\u4e3a\u7a7a\u4e32 DestroyString(&S) \u9500\u6bc1\u64cd\u4f5c \u4e32\u7684\u6a21\u5f0f\u5339\u914d ### \u7b80\u5355\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5 ### \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nm) int Index ( SString S , SString T ) { int i = 1 , j = 1 ; while ( i <= S . length && j <= T . length ) { if ( S . ch [ i ] == T . ch [ j ]) { ++ i ; ++ j ; } else { i = i - j + 2 ; j = 1 ; } if ( j > T . length ) return i - T . length ; else return 0 ; } } KMP\u7b97\u6cd5 ### \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(m+n) void GetNext ( SString T , int * next ) { next = ( int * ) malloc (( T . length + 1 ) * sizeof ( int )); int i = 1 , j = 0 ; next [ 1 ] = 0 ; while ( i < T . length ) { if ( j == 0 || T . ch [ i ] == T . ch [ j ]) { ++ i ; ++ j ; next [ i ] = j ; } else j = next [ j ]; } } int KMP ( SString S , SString T ) { int i = 1 , j = 1 ; int * next ; GetNext ( T , next ); while ( i <= S . length && j <= T . length ) { if ( j = 0 || S . ch [ i ] == T . ch [ i ]) { ++ i ; ++ j ; } else j = next [ j ]; if ( j >= T . length ) return i - T . length ; else return 0 ; } } KMP\u7b97\u6cd5\u7684\u8fdb\u4e00\u6b65\u4f18\u5316 ### void proNext ( int next [], SString T ) { int * nextvar = ( int * ) malloc ( T . length * sizeof ( int )); nextvar [ 0 ] = 1 ; for ( int i = 1 ; i <= T . length ; ++ i ) { if ( T . ch [ next [ i ]] == T . ch [ i ]) //\u548c\u8981\u6362\u8fc7\u53bb\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u76f8\u6bd4\u8f83\uff0c\u82e5\u76f8\u540c\u5219next\u6570\u7ec4\u76f8\u540c nextvar [ i ] = nextvar [ nextvar [ i ]]; else nextvar [ i ] = next [ i ]; } }","title":"\u4e32"},{"location":"4.%E4%B8%B2/#_1","text":"","title":"\u4e32"},{"location":"4.%E4%B8%B2/#_2","text":"\u4e32\uff08string\uff09\u5c31\u662f**\u5b57\u7b26\u4e32**","title":"\u4e32\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0"},{"location":"4.%E4%B8%B2/#_3","text":"\\[S = \\\\'a_1a_2\\cdots a_n\\\\'\\] \u4e32\u4e2d\u4ecd\u4ee5\u591a\u4e2a\u8fde\u7eed\u7684\u5b57\u7b26\u4e32\u79f0\u4e3a**\u5b57\u4e32**\uff0c\u5b50\u4e32\u5728\u4e3b\u4e32\u4e2d\u7684\u4f4d\u7f6e\u7531\u5b50\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4f4d\u7f6e\u5b9a\u4e49","title":"\u4e32\u7684\u5b9a\u4e49"},{"location":"4.%E4%B8%B2/#_4","text":"","title":"\u4e32\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"4.%E4%B8%B2/#_5","text":"#define MaxLen 255 typedef struct { char ch [ MaxLen ]; int length ; } SString ;","title":"\u5b9a\u957f\u987a\u5e8f\u5b58\u50a8\u8868\u793a"},{"location":"4.%E4%B8%B2/#_6","text":"typedef struct { char * ch ; int length ; } HString ;","title":"\u5806\u5206\u914d\u5b58\u50a8\u8868\u793a"},{"location":"4.%E4%B8%B2/#_7","text":"\u5229\u7528\u94fe\u8868\u6765\u5b58\u50a8\u4e32\uff0c\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u5b57\u7b26\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u8282\u70b9\u5c31\u79f0\u4e3a**\u5757**\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e0d\u6ee1\u65f6\u7528 # \u8865\u4e0a","title":"\u5757\u94fe\u5b58\u50a8\u8868\u793a"},{"location":"4.%E4%B8%B2/#_8","text":"StrAssign(&T, chars) \u8d4b\u503c\u64cd\u4f5c StrCopy(&T, S) \u590d\u5236\u64cd\u4f5c StrEmpty(S) \u5224\u7a7a\u64cd\u4f5c StrCompare(S, T) \u6bd4\u8f83\u64cd\u4f5c StrLength(S) \u6c42\u957f\u5ea6 SubString(&Sub, S, pos, len) \u7528 Sub \u8fd4\u56de\u4e32 S \u7684\u7b2c pos \u4e2a\u5b57\u7b26\u8d77\uff0c\u957f\u5ea6\u4e3a len \u7684\u5b57\u4e32 Concat(&T, S1, S2) \u8fde\u63a5\u4e24\u4e2a\u4e32 Index(S, T) \u5b9a\u4f4d\u64cd\u4f5c\u3002\u82e5\u4e3b\u4e32 S \u4e2d\u5b58\u5728\u548c T \u76f8\u540c\u7684\u5b57\u4e32\uff0c\u90a3\u4e48\u8fd4\u56de\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5426\u5219\u8fd4\u56de0 ClearString(&S) \u6e05\u7a7a\u64cd\u4f5c\uff0c\u5c06 S \u6e05\u4e3a\u7a7a\u4e32 DestroyString(&S) \u9500\u6bc1\u64cd\u4f5c","title":"\u4e32\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"4.%E4%B8%B2/#_9","text":"","title":"\u4e32\u7684\u6a21\u5f0f\u5339\u914d"},{"location":"4.%E4%B8%B2/#_10","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nm) int Index ( SString S , SString T ) { int i = 1 , j = 1 ; while ( i <= S . length && j <= T . length ) { if ( S . ch [ i ] == T . ch [ j ]) { ++ i ; ++ j ; } else { i = i - j + 2 ; j = 1 ; } if ( j > T . length ) return i - T . length ; else return 0 ; } }","title":"\u7b80\u5355\u6a21\u5f0f\u5339\u914d\u7b97\u6cd5"},{"location":"4.%E4%B8%B2/#kmp","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(m+n) void GetNext ( SString T , int * next ) { next = ( int * ) malloc (( T . length + 1 ) * sizeof ( int )); int i = 1 , j = 0 ; next [ 1 ] = 0 ; while ( i < T . length ) { if ( j == 0 || T . ch [ i ] == T . ch [ j ]) { ++ i ; ++ j ; next [ i ] = j ; } else j = next [ j ]; } } int KMP ( SString S , SString T ) { int i = 1 , j = 1 ; int * next ; GetNext ( T , next ); while ( i <= S . length && j <= T . length ) { if ( j = 0 || S . ch [ i ] == T . ch [ i ]) { ++ i ; ++ j ; } else j = next [ j ]; if ( j >= T . length ) return i - T . length ; else return 0 ; } }","title":"KMP\u7b97\u6cd5"},{"location":"4.%E4%B8%B2/#kmp_1","text":"void proNext ( int next [], SString T ) { int * nextvar = ( int * ) malloc ( T . length * sizeof ( int )); nextvar [ 0 ] = 1 ; for ( int i = 1 ; i <= T . length ; ++ i ) { if ( T . ch [ next [ i ]] == T . ch [ i ]) //\u548c\u8981\u6362\u8fc7\u53bb\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u76f8\u6bd4\u8f83\uff0c\u82e5\u76f8\u540c\u5219next\u6570\u7ec4\u76f8\u540c nextvar [ i ] = nextvar [ nextvar [ i ]]; else nextvar [ i ] = next [ i ]; } }","title":"KMP\u7b97\u6cd5\u7684\u8fdb\u4e00\u6b65\u4f18\u5316"},{"location":"Datastructure/","text":"Data Structure and Algorithm ### List ### typedef int ElemType ; typedef struct LNode { ElemType data ; struct LNode * next ; } LNode , * LinkList ;","title":"Data Structure and Algorithm"},{"location":"Datastructure/#data-structure-and-algorithm","text":"","title":"Data Structure and Algorithm"},{"location":"Datastructure/#list","text":"typedef int ElemType ; typedef struct LNode { ElemType data ; struct LNode * next ; } LNode , * LinkList ;","title":"List"}]}